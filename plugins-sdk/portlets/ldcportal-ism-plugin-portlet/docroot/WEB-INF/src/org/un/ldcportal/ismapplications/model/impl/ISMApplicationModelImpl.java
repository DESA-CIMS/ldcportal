/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.un.ldcportal.ismapplications.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.un.ldcportal.ismapplications.model.ISMApplication;
import org.un.ldcportal.ismapplications.model.ISMApplicationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the ISMApplication service. Represents a row in the &quot;ISM_ISMApplication&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.un.ldcportal.ismapplications.model.ISMApplicationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ISMApplicationImpl}.
 * </p>
 *
 * @author Thibault Boyeux
 * @see ISMApplicationImpl
 * @see org.un.ldcportal.ismapplications.model.ISMApplication
 * @see org.un.ldcportal.ismapplications.model.ISMApplicationModel
 * @generated
 */
public class ISMApplicationModelImpl extends BaseModelImpl<ISMApplication>
	implements ISMApplicationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a i s m application model instance should use the {@link org.un.ldcportal.ismapplications.model.ISMApplication} interface instead.
	 */
	public static final String TABLE_NAME = "ISM_ISMApplication";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ismApplicationId", Types.BIGINT },
			{ "country", Types.VARCHAR },
			{ "ismId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "applicationReason", Types.VARCHAR },
			{ "applicationAdditional", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ISM_ISMApplication (uuid_ VARCHAR(75) null,ismApplicationId LONG not null primary key,country VARCHAR(75) null,ismId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,companyId LONG,groupId LONG,userId LONG,applicationReason VARCHAR(75) null,applicationAdditional VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ISM_ISMApplication";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.un.ldcportal.ismapplications.model.ISMApplication"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.un.ldcportal.ismapplications.model.ISMApplication"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.un.ldcportal.ismapplications.model.ISMApplication"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.un.ldcportal.ismapplications.model.ISMApplication"));

	public ISMApplicationModelImpl() {
	}

	public long getPrimaryKey() {
		return _ismApplicationId;
	}

	public void setPrimaryKey(long primaryKey) {
		setIsmApplicationId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ismApplicationId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ISMApplication.class;
	}

	public String getModelClassName() {
		return ISMApplication.class.getName();
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getIsmApplicationId() {
		return _ismApplicationId;
	}

	public void setIsmApplicationId(long ismApplicationId) {
		_ismApplicationId = ismApplicationId;
	}

	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	public void setCountry(String country) {
		_country = country;
	}

	public long getIsmId() {
		return _ismId;
	}

	public void setIsmId(long ismId) {
		_ismId = ismId;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getApplicationReason() {
		if (_applicationReason == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationReason;
		}
	}

	public void setApplicationReason(String applicationReason) {
		_applicationReason = applicationReason;
	}

	public String getApplicationAdditional() {
		if (_applicationAdditional == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationAdditional;
		}
	}

	public void setApplicationAdditional(String applicationAdditional) {
		_applicationAdditional = applicationAdditional;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ISMApplication toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ISMApplication)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					ISMApplication.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ISMApplicationImpl ismApplicationImpl = new ISMApplicationImpl();

		ismApplicationImpl.setUuid(getUuid());
		ismApplicationImpl.setIsmApplicationId(getIsmApplicationId());
		ismApplicationImpl.setCountry(getCountry());
		ismApplicationImpl.setIsmId(getIsmId());
		ismApplicationImpl.setStatus(getStatus());
		ismApplicationImpl.setStatusByUserId(getStatusByUserId());
		ismApplicationImpl.setStatusByUserName(getStatusByUserName());
		ismApplicationImpl.setStatusDate(getStatusDate());
		ismApplicationImpl.setCompanyId(getCompanyId());
		ismApplicationImpl.setGroupId(getGroupId());
		ismApplicationImpl.setUserId(getUserId());
		ismApplicationImpl.setApplicationReason(getApplicationReason());
		ismApplicationImpl.setApplicationAdditional(getApplicationAdditional());

		ismApplicationImpl.resetOriginalValues();

		return ismApplicationImpl;
	}

	public int compareTo(ISMApplication ismApplication) {
		long primaryKey = ismApplication.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ISMApplication ismApplication = null;

		try {
			ismApplication = (ISMApplication)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = ismApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ISMApplicationModelImpl ismApplicationModelImpl = this;

		ismApplicationModelImpl._originalUuid = ismApplicationModelImpl._uuid;

		ismApplicationModelImpl._originalStatus = ismApplicationModelImpl._status;

		ismApplicationModelImpl._setOriginalStatus = false;

		ismApplicationModelImpl._originalCompanyId = ismApplicationModelImpl._companyId;

		ismApplicationModelImpl._setOriginalCompanyId = false;

		ismApplicationModelImpl._originalGroupId = ismApplicationModelImpl._groupId;

		ismApplicationModelImpl._setOriginalGroupId = false;

		ismApplicationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ISMApplication> toCacheModel() {
		ISMApplicationCacheModel ismApplicationCacheModel = new ISMApplicationCacheModel();

		ismApplicationCacheModel.uuid = getUuid();

		String uuid = ismApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ismApplicationCacheModel.uuid = null;
		}

		ismApplicationCacheModel.ismApplicationId = getIsmApplicationId();

		ismApplicationCacheModel.country = getCountry();

		String country = ismApplicationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			ismApplicationCacheModel.country = null;
		}

		ismApplicationCacheModel.ismId = getIsmId();

		ismApplicationCacheModel.status = getStatus();

		ismApplicationCacheModel.statusByUserId = getStatusByUserId();

		ismApplicationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = ismApplicationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			ismApplicationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			ismApplicationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			ismApplicationCacheModel.statusDate = Long.MIN_VALUE;
		}

		ismApplicationCacheModel.companyId = getCompanyId();

		ismApplicationCacheModel.groupId = getGroupId();

		ismApplicationCacheModel.userId = getUserId();

		ismApplicationCacheModel.applicationReason = getApplicationReason();

		String applicationReason = ismApplicationCacheModel.applicationReason;

		if ((applicationReason != null) && (applicationReason.length() == 0)) {
			ismApplicationCacheModel.applicationReason = null;
		}

		ismApplicationCacheModel.applicationAdditional = getApplicationAdditional();

		String applicationAdditional = ismApplicationCacheModel.applicationAdditional;

		if ((applicationAdditional != null) &&
				(applicationAdditional.length() == 0)) {
			ismApplicationCacheModel.applicationAdditional = null;
		}

		return ismApplicationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ismApplicationId=");
		sb.append(getIsmApplicationId());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", ismId=");
		sb.append(getIsmId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", applicationReason=");
		sb.append(getApplicationReason());
		sb.append(", applicationAdditional=");
		sb.append(getApplicationAdditional());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.un.ldcportal.ismapplications.model.ISMApplication");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ismApplicationId</column-name><column-value><![CDATA[");
		sb.append(getIsmApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ismId</column-name><column-value><![CDATA[");
		sb.append(getIsmId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationReason</column-name><column-value><![CDATA[");
		sb.append(getApplicationReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationAdditional</column-name><column-value><![CDATA[");
		sb.append(getApplicationAdditional());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ISMApplication.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ISMApplication.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ismApplicationId;
	private String _country;
	private long _ismId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _applicationReason;
	private String _applicationAdditional;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private ISMApplication _escapedModelProxy;
}