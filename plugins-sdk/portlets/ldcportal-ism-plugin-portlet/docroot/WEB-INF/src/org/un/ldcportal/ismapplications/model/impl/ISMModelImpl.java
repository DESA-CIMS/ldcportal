/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.un.ldcportal.ismapplications.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.un.ldcportal.ismapplications.model.ISM;
import org.un.ldcportal.ismapplications.model.ISMModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the ISM service. Represents a row in the &quot;ISM_ISM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.un.ldcportal.ismapplications.model.ISMModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ISMImpl}.
 * </p>
 *
 * @author Thibault Boyeux
 * @see ISMImpl
 * @see org.un.ldcportal.ismapplications.model.ISM
 * @see org.un.ldcportal.ismapplications.model.ISMModel
 * @generated
 */
public class ISMModelImpl extends BaseModelImpl<ISM> implements ISMModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a i s m model instance should use the {@link org.un.ldcportal.ismapplications.model.ISM} interface instead.
	 */
	public static final String TABLE_NAME = "ISM_ISM";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ismId", Types.BIGINT },
			{ "webContentId", Types.BIGINT },
			{ "moderatorId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "mbCategoryId", Types.BIGINT },
			{ "assetCategoryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ISM_ISM (ismId LONG not null primary key,webContentId LONG,moderatorId LONG,companyId LONG,groupId LONG,mbCategoryId LONG,assetCategoryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ISM_ISM";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.un.ldcportal.ismapplications.model.ISM"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.un.ldcportal.ismapplications.model.ISM"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.un.ldcportal.ismapplications.model.ISM"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ISMID_COLUMN_BITMASK = 4L;
	public static long MBCATEGORYID_COLUMN_BITMASK = 8L;
	public static long WEBCONTENTID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.un.ldcportal.ismapplications.model.ISM"));

	public ISMModelImpl() {
	}

	public long getPrimaryKey() {
		return _ismId;
	}

	public void setPrimaryKey(long primaryKey) {
		setIsmId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ismId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ISM.class;
	}

	public String getModelClassName() {
		return ISM.class.getName();
	}

	public long getIsmId() {
		return _ismId;
	}

	public void setIsmId(long ismId) {
		_columnBitmask |= ISMID_COLUMN_BITMASK;

		if (!_setOriginalIsmId) {
			_setOriginalIsmId = true;

			_originalIsmId = _ismId;
		}

		_ismId = ismId;
	}

	public long getOriginalIsmId() {
		return _originalIsmId;
	}

	public long getWebContentId() {
		return _webContentId;
	}

	public void setWebContentId(long webContentId) {
		_columnBitmask |= WEBCONTENTID_COLUMN_BITMASK;

		if (!_setOriginalWebContentId) {
			_setOriginalWebContentId = true;

			_originalWebContentId = _webContentId;
		}

		_webContentId = webContentId;
	}

	public long getOriginalWebContentId() {
		return _originalWebContentId;
	}

	public long getModeratorId() {
		return _moderatorId;
	}

	public void setModeratorId(long moderatorId) {
		_moderatorId = moderatorId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getMbCategoryId() {
		return _mbCategoryId;
	}

	public void setMbCategoryId(long mbCategoryId) {
		_columnBitmask |= MBCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalMbCategoryId) {
			_setOriginalMbCategoryId = true;

			_originalMbCategoryId = _mbCategoryId;
		}

		_mbCategoryId = mbCategoryId;
	}

	public long getOriginalMbCategoryId() {
		return _originalMbCategoryId;
	}

	public long getAssetCategoryId() {
		return _assetCategoryId;
	}

	public void setAssetCategoryId(long assetCategoryId) {
		_assetCategoryId = assetCategoryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ISM toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ISM)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					ISM.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ISMImpl ismImpl = new ISMImpl();

		ismImpl.setIsmId(getIsmId());
		ismImpl.setWebContentId(getWebContentId());
		ismImpl.setModeratorId(getModeratorId());
		ismImpl.setCompanyId(getCompanyId());
		ismImpl.setGroupId(getGroupId());
		ismImpl.setMbCategoryId(getMbCategoryId());
		ismImpl.setAssetCategoryId(getAssetCategoryId());

		ismImpl.resetOriginalValues();

		return ismImpl;
	}

	public int compareTo(ISM ism) {
		long primaryKey = ism.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ISM ism = null;

		try {
			ism = (ISM)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = ism.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ISMModelImpl ismModelImpl = this;

		ismModelImpl._originalIsmId = ismModelImpl._ismId;

		ismModelImpl._setOriginalIsmId = false;

		ismModelImpl._originalWebContentId = ismModelImpl._webContentId;

		ismModelImpl._setOriginalWebContentId = false;

		ismModelImpl._originalCompanyId = ismModelImpl._companyId;

		ismModelImpl._setOriginalCompanyId = false;

		ismModelImpl._originalGroupId = ismModelImpl._groupId;

		ismModelImpl._setOriginalGroupId = false;

		ismModelImpl._originalMbCategoryId = ismModelImpl._mbCategoryId;

		ismModelImpl._setOriginalMbCategoryId = false;

		ismModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ISM> toCacheModel() {
		ISMCacheModel ismCacheModel = new ISMCacheModel();

		ismCacheModel.ismId = getIsmId();

		ismCacheModel.webContentId = getWebContentId();

		ismCacheModel.moderatorId = getModeratorId();

		ismCacheModel.companyId = getCompanyId();

		ismCacheModel.groupId = getGroupId();

		ismCacheModel.mbCategoryId = getMbCategoryId();

		ismCacheModel.assetCategoryId = getAssetCategoryId();

		return ismCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{ismId=");
		sb.append(getIsmId());
		sb.append(", webContentId=");
		sb.append(getWebContentId());
		sb.append(", moderatorId=");
		sb.append(getModeratorId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", mbCategoryId=");
		sb.append(getMbCategoryId());
		sb.append(", assetCategoryId=");
		sb.append(getAssetCategoryId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.un.ldcportal.ismapplications.model.ISM");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ismId</column-name><column-value><![CDATA[");
		sb.append(getIsmId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webContentId</column-name><column-value><![CDATA[");
		sb.append(getWebContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moderatorId</column-name><column-value><![CDATA[");
		sb.append(getModeratorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mbCategoryId</column-name><column-value><![CDATA[");
		sb.append(getMbCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetCategoryId</column-name><column-value><![CDATA[");
		sb.append(getAssetCategoryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ISM.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ISM.class
		};
	private long _ismId;
	private long _originalIsmId;
	private boolean _setOriginalIsmId;
	private long _webContentId;
	private long _originalWebContentId;
	private boolean _setOriginalWebContentId;
	private long _moderatorId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _mbCategoryId;
	private long _originalMbCategoryId;
	private boolean _setOriginalMbCategoryId;
	private long _assetCategoryId;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private ISM _escapedModelProxy;
}