/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.un.ldcportal.ismapplications.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ISMApplication service. Represents a row in the &quot;ISM_ISMApplication&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.un.ldcportal.ismapplications.model.impl.ISMApplicationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.un.ldcportal.ismapplications.model.impl.ISMApplicationImpl}.
 * </p>
 *
 * @author Thibault Boyeux
 * @see ISMApplication
 * @see org.un.ldcportal.ismapplications.model.impl.ISMApplicationImpl
 * @see org.un.ldcportal.ismapplications.model.impl.ISMApplicationModelImpl
 * @generated
 */
public interface ISMApplicationModel extends BaseModel<ISMApplication>,
	WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a i s m application model instance should use the {@link ISMApplication} interface instead.
	 */

	/**
	 * Returns the primary key of this i s m application.
	 *
	 * @return the primary key of this i s m application
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this i s m application.
	 *
	 * @param primaryKey the primary key of this i s m application
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this i s m application.
	 *
	 * @return the uuid of this i s m application
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this i s m application.
	 *
	 * @param uuid the uuid of this i s m application
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the ism application ID of this i s m application.
	 *
	 * @return the ism application ID of this i s m application
	 */
	public long getIsmApplicationId();

	/**
	 * Sets the ism application ID of this i s m application.
	 *
	 * @param ismApplicationId the ism application ID of this i s m application
	 */
	public void setIsmApplicationId(long ismApplicationId);

	/**
	 * Returns the country of this i s m application.
	 *
	 * @return the country of this i s m application
	 */
	@AutoEscape
	public String getCountry();

	/**
	 * Sets the country of this i s m application.
	 *
	 * @param country the country of this i s m application
	 */
	public void setCountry(String country);

	/**
	 * Returns the ism ID of this i s m application.
	 *
	 * @return the ism ID of this i s m application
	 */
	public long getIsmId();

	/**
	 * Sets the ism ID of this i s m application.
	 *
	 * @param ismId the ism ID of this i s m application
	 */
	public void setIsmId(long ismId);

	/**
	 * Returns the status of this i s m application.
	 *
	 * @return the status of this i s m application
	 */
	public int getStatus();

	/**
	 * Sets the status of this i s m application.
	 *
	 * @param status the status of this i s m application
	 */
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this i s m application.
	 *
	 * @return the status by user ID of this i s m application
	 */
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this i s m application.
	 *
	 * @param statusByUserId the status by user ID of this i s m application
	 */
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this i s m application.
	 *
	 * @return the status by user uuid of this i s m application
	 * @throws SystemException if a system exception occurred
	 */
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this i s m application.
	 *
	 * @param statusByUserUuid the status by user uuid of this i s m application
	 */
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this i s m application.
	 *
	 * @return the status by user name of this i s m application
	 */
	@AutoEscape
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this i s m application.
	 *
	 * @param statusByUserName the status by user name of this i s m application
	 */
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this i s m application.
	 *
	 * @return the status date of this i s m application
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this i s m application.
	 *
	 * @param statusDate the status date of this i s m application
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the company ID of this i s m application.
	 *
	 * @return the company ID of this i s m application
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this i s m application.
	 *
	 * @param companyId the company ID of this i s m application
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this i s m application.
	 *
	 * @return the group ID of this i s m application
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this i s m application.
	 *
	 * @param groupId the group ID of this i s m application
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this i s m application.
	 *
	 * @return the user ID of this i s m application
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this i s m application.
	 *
	 * @param userId the user ID of this i s m application
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this i s m application.
	 *
	 * @return the user uuid of this i s m application
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this i s m application.
	 *
	 * @param userUuid the user uuid of this i s m application
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the application reason of this i s m application.
	 *
	 * @return the application reason of this i s m application
	 */
	@AutoEscape
	public String getApplicationReason();

	/**
	 * Sets the application reason of this i s m application.
	 *
	 * @param applicationReason the application reason of this i s m application
	 */
	public void setApplicationReason(String applicationReason);

	/**
	 * Returns the application additional of this i s m application.
	 *
	 * @return the application additional of this i s m application
	 */
	@AutoEscape
	public String getApplicationAdditional();

	/**
	 * Sets the application additional of this i s m application.
	 *
	 * @param applicationAdditional the application additional of this i s m application
	 */
	public void setApplicationAdditional(String applicationAdditional);

	/**
	 * @deprecated Renamed to {@link #isApproved()}
	 */
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this i s m application is approved.
	 *
	 * @return <code>true</code> if this i s m application is approved; <code>false</code> otherwise
	 */
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this i s m application is a draft.
	 *
	 * @return <code>true</code> if this i s m application is a draft; <code>false</code> otherwise
	 */
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this i s m application is expired.
	 *
	 * @return <code>true</code> if this i s m application is expired; <code>false</code> otherwise
	 */
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this i s m application is pending.
	 *
	 * @return <code>true</code> if this i s m application is pending; <code>false</code> otherwise
	 */
	public boolean isPending();

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(ISMApplication ismApplication);

	public int hashCode();

	public CacheModel<ISMApplication> toCacheModel();

	public ISMApplication toEscapedModel();

	public String toString();

	public String toXmlString();
}