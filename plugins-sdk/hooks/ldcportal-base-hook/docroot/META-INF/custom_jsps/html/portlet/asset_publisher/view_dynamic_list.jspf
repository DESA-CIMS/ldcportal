<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
int end = searchContainer.getEnd();
int start = searchContainer.getStart();

assetEntryQuery.setGroupIds(groupIds);
assetEntryQuery.setExcludeZeroViewCount(excludeZeroViewCount);
assetEntryQuery.setOrderByCol1(orderByColumn1);
assetEntryQuery.setOrderByCol2(orderByColumn2);
assetEntryQuery.setOrderByType1(orderByType1);
assetEntryQuery.setOrderByType2(orderByType2);




List<AssetEntry> results = new ArrayList<AssetEntry>();
int total = 0;

if (!portletName.equals(PortletKeys.RELATED_ASSETS) || (assetEntryQuery.getLinkedAssetEntryId() > 0)) {
	if (assetVocabularyId > 0) {
		AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.getVocabulary(assetVocabularyId);

		List<AssetCategory> assetCategories = AssetCategoryLocalServiceUtil.getVocabularyRootCategories(assetVocabulary.getVocabularyId(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);

		if (!anyAssetType) {
			assetEntryQuery.setClassNameIds(classNameIds);
		}

		for (AssetCategory assetCategory : assetCategories) {
			assetCategory = assetCategory.toEscapedModel();

			long[] oldAllCategoryIds = assetEntryQuery.getAllCategoryIds();

			long[] newAllAssetCategoryIds = ArrayUtil.append(oldAllCategoryIds, assetCategory.getCategoryId());

			assetEntryQuery.setAllCategoryIds(newAllAssetCategoryIds);

			int groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			total += groupTotal;

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);

			if (!results.isEmpty()) {
				searchContainer.setResults(results);

				request.setAttribute("view.jsp-results", results);
	%>

				<h3 class="asset-entries-group-label"><%= assetCategory.getTitle(locale) %></h3>

				<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
			}

			if (groupTotal > 0) {
				if ((end > 0) && (end > groupTotal)) {
					end -= groupTotal;
				}
				else {
					end = 0;
				}

				if ((start > 0) && (start > groupTotal)) {
					start -= groupTotal;
				}
				else {
					start = 0;
				}
			}

			assetEntryQuery.setAllCategoryIds(oldAllCategoryIds);
			assetEntryQuery.setEnd(QueryUtil.ALL_POS);
			assetEntryQuery.setStart(QueryUtil.ALL_POS);
		}

		searchContainer.setTotal(total);
	}
	else if (!groupByClass) {
		if (!anyAssetType) {
			assetEntryQuery.setClassNameIds(classNameIds);
		}

		total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);
		
		if (assetEntryQuery.getLinkedAssetEntryId() > 0 && displayAssetItself)  {
			start--;
			if (start < 0) {
				start = 0;
			}
			end--;
		}
		
		assetEntryQuery.setStart(start);
		assetEntryQuery.setEnd(end);		
		
		if (assetEntryQuery.getLinkedAssetEntryId() > 0 && displayAssetItself) {			
			results.add(AssetEntryServiceUtil.getEntry(assetEntryQuery.getLinkedAssetEntryId()));
			total++;
			results.addAll(AssetEntryServiceUtil.getEntries(assetEntryQuery));
		}
		else {
			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		}

		searchContainer.setResults(results);
		searchContainer.setTotal(total);
	
		request.setAttribute("view.jsp-results", results);
	%>

		<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
	}
	else {
		for (long classNameId : classNameIds) {
			long[] oldGroupClassNameIds = assetEntryQuery.getClassNameIds();

			long[] groupClassNameIds = {classNameId};

			assetEntryQuery.setClassNameIds(groupClassNameIds);

			String groupClassName = PortalUtil.getClassName(classNameId);

			AssetRendererFactory groupAssetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(groupClassName);

			int groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			total += groupTotal;

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);
			
			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);

			searchContainer.setResults(results);

			request.setAttribute("view.jsp-results", results);

			if (!results.isEmpty()) {
	%>

				<h3 class="asset-entries-group-label"><liferay-ui:message key="<%= groupAssetRendererFactory.getType() %>" /></h3>

				<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>

	<%
			}

			if (groupTotal > 0) {
				if ((end > 0) && (end > groupTotal)) {
					end -= groupTotal;
				}
				else {
					end = 0;
				}

				if ((start > 0) && (start > groupTotal)) {
					start -= groupTotal;
				}
				else {
					start = 0;
				}
			}

			assetEntryQuery.setClassNameIds(oldGroupClassNameIds);
			assetEntryQuery.setEnd(QueryUtil.ALL_POS);
			assetEntryQuery.setStart(QueryUtil.ALL_POS);
		}

		searchContainer.setTotal(total);
	}
}

if (total == 0) {
	if (!showPortletWithNoResults && ((addPortletURLs == null) || addPortletURLs.isEmpty()) && !((assetCategoryId > 0) || Validator.isNotNull(assetTagName))) {
		//renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
	}
%>

	<div class="portlet-msg-info">
		<c:choose>
			<c:when test="<%= !portletName.equals(PortletKeys.RELATED_ASSETS) %>">
				<liferay-ui:message key="there-is-currently-no-additional-information-available" />
			</c:when>
			<c:otherwise>
				<liferay-ui:message key="there-is-currently-no-additional-information-available" />
			</c:otherwise>
		</c:choose>
	</div>

<%
}
%>